{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst axios = require('axios');\nconst app = express();\nconst port = process.env.PORT || 8081;\napp.use(cors());\napp.use(express.json());\napp.get('/mociones', async (req, res) => {\n  try {\n    const response = await axios.get('http://localhost:8080/mociones');\n    res.json(response.data);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to fetch mociones'\n    });\n  }\n});\napp.post('/mociones', async (req, res) => {\n  try {\n    const newMocion = req.body;\n    const response = await axios.post('http://localhost:8080/mociones', newMocion);\n    res.status(201).json(response.data);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to add mocion'\n    });\n  }\n});\napp.put('/mociones/:id', async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const updatedMocion = req.body;\n    const response = await axios.put(`http://localhost:8080/mociones/${id}`, updatedMocion);\n    res.json(response.data);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update mocion'\n    });\n  }\n});\napp.delete('/mociones/:id', async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    await axios.delete(`http://localhost:8080/mociones/${id}`);\n    res.status(204).send();\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete mocion'\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`API server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","cors","axios","app","port","process","env","PORT","use","json","get","req","res","response","data","error","status","post","newMocion","body","put","id","params","updatedMocion","delete","send","listen","console","log"],"sources":["C:/Users/jhose/IdeaProjects/mociones/src/apiService.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst axios = require('axios');\r\nconst app = express();\r\nconst port = process.env.PORT || 8081;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\napp.get('/mociones', async (req, res) => {\r\n    try {\r\n        const response = await axios.get('http://localhost:8080/mociones');\r\n        res.json(response.data);\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Failed to fetch mociones' });\r\n    }\r\n});\r\n\r\napp.post('/mociones', async (req, res) => {\r\n    try {\r\n        const newMocion = req.body;\r\n        const response = await axios.post('http://localhost:8080/mociones', newMocion);\r\n        res.status(201).json(response.data);\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Failed to add mocion' });\r\n    }\r\n});\r\n\r\napp.put('/mociones/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const updatedMocion = req.body;\r\n        const response = await axios.put(`http://localhost:8080/mociones/${id}`, updatedMocion);\r\n        res.json(response.data);\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Failed to update mocion' });\r\n    }\r\n});\r\n\r\napp.delete('/mociones/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await axios.delete(`http://localhost:8080/mociones/${id}`);\r\n        res.status(204).send();\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Failed to delete mocion' });\r\n    }\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`API server is running on port ${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;AAErCJ,GAAG,CAACK,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACK,GAAG,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC;AAEvBN,GAAG,CAACO,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACQ,GAAG,CAAC,gCAAgC,CAAC;IAClEE,GAAG,CAACH,IAAI,CAACI,QAAQ,CAACC,IAAI,CAAC;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAE;IAA2B,CAAC,CAAC;EAC/D;AACJ,CAAC,CAAC;AAEFZ,GAAG,CAACc,IAAI,CAAC,WAAW,EAAE,OAAON,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACA,MAAMM,SAAS,GAAGP,GAAG,CAACQ,IAAI;IAC1B,MAAMN,QAAQ,GAAG,MAAMX,KAAK,CAACe,IAAI,CAAC,gCAAgC,EAAEC,SAAS,CAAC;IAC9EN,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAACI,QAAQ,CAACC,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAE;IAAuB,CAAC,CAAC;EAC3D;AACJ,CAAC,CAAC;AAEFZ,GAAG,CAACiB,GAAG,CAAC,eAAe,EAAE,OAAOT,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACA,MAAM;MAAES;IAAG,CAAC,GAAGV,GAAG,CAACW,MAAM;IACzB,MAAMC,aAAa,GAAGZ,GAAG,CAACQ,IAAI;IAC9B,MAAMN,QAAQ,GAAG,MAAMX,KAAK,CAACkB,GAAG,CAAC,kCAAkCC,EAAE,EAAE,EAAEE,aAAa,CAAC;IACvFX,GAAG,CAACH,IAAI,CAACI,QAAQ,CAACC,IAAI,CAAC;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAE;IAA0B,CAAC,CAAC;EAC9D;AACJ,CAAC,CAAC;AAEFZ,GAAG,CAACqB,MAAM,CAAC,eAAe,EAAE,OAAOb,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI;IACA,MAAM;MAAES;IAAG,CAAC,GAAGV,GAAG,CAACW,MAAM;IACzB,MAAMpB,KAAK,CAACsB,MAAM,CAAC,kCAAkCH,EAAE,EAAE,CAAC;IAC1DT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACS,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAE;IAA0B,CAAC,CAAC;EAC9D;AACJ,CAAC,CAAC;AAEFZ,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACnBuB,OAAO,CAACC,GAAG,CAAC,iCAAiCxB,IAAI,EAAE,CAAC;AACxD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}